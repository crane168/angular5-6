(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/platform-browser'), require('rxjs')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/platform-browser', 'rxjs'], factory) :
	(factory((global['ng-confirmations'] = {}),global.core,global.common,global.platformBrowser,global.rxjs));
}(this, (function (exports,core,common,platformBrowser,rxjs) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ConfirmationService = /** @class */ (function () {
    function ConfirmationService() {
        this.confirmation$ = new rxjs.Subject();
    }
    /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} override
     * @return {?}
     */
    ConfirmationService.prototype.create = /**
     * @param {?=} title
     * @param {?=} message
     * @param {?=} override
     * @return {?}
     */
    function (title, message, override) {
        if (title === void 0) { title = ''; }
        if (message === void 0) { message = ''; }
        if (override === void 0) { override = {}; }
        var /** @type {?} */ resolve$ = new rxjs.Subject();
        this.confirmation$.next({
            title: title,
            message: message,
            resolve$: resolve$,
            override: override
        });
        return resolve$;
    };
    ConfirmationService.decorators = [
        { type: core.Injectable },
    ];
    return ConfirmationService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ConfirmationComponent = /** @class */ (function () {
    function ConfirmationComponent(_ngZone) {
        this._ngZone = _ngZone;
        this.animationState = 'enter';
        this.incomingData = {
            title: '',
            titleIsTemplate: false,
            message: '',
            messageIsTemplate: false,
            overlay: true,
            overlayClickToClose: true,
            showCloseButton: true,
            confirmText: 'Yes',
            confirmTextIsTemplate: false,
            declineText: 'No',
            declineTextIsTemplate: false,
            resolve$: null
        };
    }
    /**
     * @return {?}
     */
    ConfirmationComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.focusEl.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    ConfirmationComponent.prototype.overlayClick = /**
     * @return {?}
     */
    function () {
        if (!this.incomingData.overlayClickToClose) {
            return;
        }
        this.close('overlayClick');
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ConfirmationComponent.prototype.close = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this = this;
        this.animationState = 'leave';
        this._ngZone.runOutsideAngular(function () {
            setTimeout(function () {
                _this._ngZone.run(function () {
                    _this.resolve({ closedWithOutResolving: type });
                });
            }, 450);
        });
    };
    /**
     * @param {?} how
     * @return {?}
     */
    ConfirmationComponent.prototype.resolve = /**
     * @param {?} how
     * @return {?}
     */
    function (how) {
        var _this = this;
        this.animationState = 'leave';
        this._ngZone.runOutsideAngular(function () {
            setTimeout(function () {
                _this._ngZone.run(function () {
                    _this.incomingData.resolve$.next(how);
                });
            }, 450);
        });
    };
    ConfirmationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'jaspero-confirmation',
                    template: "<div *ngIf=\"incomingData.overlay\" class=\"jaspero__confirmation_overlay\" [class.active]=\"animationState === 'enter'\" (click)=\"overlayClick()\"></div> <div class=\"jaspero__confirmation_dialog\" [class.active]=\"animationState === 'enter'\" > <div class=\"jaspero__confirmation_dialog-title\"> <jaspero-variable-content [isTemplate]=\"incomingData.titleIsTemplate\" [item]=\"incomingData.title\"></jaspero-variable-content> </div> <div class=\"jaspero__confirmation_dialog-content\"> <jaspero-variable-content [isTemplate]=\"incomingData.messageIsTemplate\" [item]=\"incomingData.message\"></jaspero-variable-content> </div> <div class=\"jaspero__confirmation_dialog-actions\"> <button class=\"default\" *ngIf=\"incomingData.showCloseButton\" (click)=\"resolve({resolved: false})\"> <jaspero-variable-content [isTemplate]=\"incomingData.declineTextIsTemplate\" [item]=\"incomingData.declineText\"></jaspero-variable-content> </button> <button class=\"primary\" (click)=\"resolve({resolved: true})\" #focus> <jaspero-variable-content [isTemplate]=\"incomingData.confirmTextIsTemplate\" [item]=\"incomingData.confirmText\"></jaspero-variable-content> </button> </div> </div>",
                    styles: [".jaspero__confirmation { display: block; position: fixed; top: 0; right: 0; width: 100%; height: 100%; z-index: 108; } .jaspero__confirmation_overlay { top: 0; right: 0; background-color: rgba(0, 0, 0, 0.54); opacity: 0; transition: all 0.5s cubic-bezier(0.35, 0, 0.25, 1); position: fixed; z-index: 109; width: 100%; height: 100%; } .jaspero__confirmation_overlay.active { opacity: 1; } .jaspero__confirmation_dialog { max-width: 350px; width: 100%; display: table; max-height: 50%; overflow: hidden; position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto; z-index: 110; outline: none; border-radius: 2px; opacity: 0; box-shadow: 0 7px 9px -4px rgba(0, 0, 0, 0.2), 0 14px 21px 2px rgba(0, 0, 0, 0.14), 0 5px 26px 4px rgba(0, 0, 0, 0.12); transition: opacity 0.4s cubic-bezier(0.25, 0.8, 0.25, 1); background-color: #fff; color: rgba(0, 0, 0, 0.87); } .jaspero__confirmation_dialog.active { opacity: 1; } .jaspero__confirmation_dialog-title { font-size: 24px; font-weight: 500; letter-spacing: .005em; line-height: 26px; margin-bottom: 20px; padding: 24px 24px 0; text-transform: capitalize; } .jaspero__confirmation_dialog-content { padding: 0 24px 24px; -ms-flex: 1; flex: 1; overflow: auto; position: relative; } .jaspero__confirmation_dialog-actions { min-height: 52px; padding: 8px 8px 8px 24px; display: -ms-flexbox; display: flex; -ms-flex-align: center; align-items: center; -ms-flex-pack: end; justify-content: flex-end; position: relative; } .jaspero__confirmation_dialog-actions button { min-width: 88px; color: white; min-height: 36px; margin: 6px 8px; padding: 0 16px; display: inline-block; position: relative; overflow: hidden; outline: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; cursor: pointer; background: none; border: 0; border-radius: 2px; transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1); font-family: inherit; font-size: 14px; font-style: inherit; font-variant: inherit; font-weight: 500; letter-spacing: inherit; line-height: 36px; text-align: center; text-transform: uppercase; text-decoration: none; vertical-align: top; white-space: nowrap; } .jaspero__confirmation_dialog-actions .default { background: #989898; } .jaspero__confirmation_dialog-actions .default:hover { background: #7f7f7f; } .jaspero__confirmation_dialog-actions .primary { background: #ec4a1d; } .jaspero__confirmation_dialog-actions .primary:hover { background: #e57454; } "],
                    encapsulation: core.ViewEncapsulation.None,
                },] },
    ];
    /** @nocollapse */
    ConfirmationComponent.ctorParameters = function () { return [
        { type: core.NgZone, },
    ]; };
    ConfirmationComponent.propDecorators = {
        "true": [{ type: core.HostBinding, args: ['class.jaspero__confirmation',] },],
        "focusEl": [{ type: core.ViewChild, args: ['focus',] },],
    };
    return ConfirmationComponent;
}());

var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ConfirmationsComponent = /** @class */ (function () {
    function ConfirmationsComponent(_service, _resolver, _domSanitize) {
        this._service = _service;
        this._resolver = _resolver;
        this._domSanitize = _domSanitize;
        this.settings = {
            overlay: true,
            overlayClickToClose: true,
            showCloseButton: true,
            confirmText: 'Yes',
            declineText: 'No'
        };
    }
    Object.defineProperty(ConfirmationsComponent.prototype, "defaultSettings", {
        set: /**
         * @param {?} settings
         * @return {?}
         */
        function (settings) {
            this.settings = __assign({}, this.settings, settings);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ConfirmationsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._listener = this._service.confirmation$.subscribe(function (confirmation) {
            if (_this._current) {
                _this._handleResolve();
            }
            if (confirmation.close) {
                return;
            }
            var /** @type {?} */ settingsFinal = {};
            for (var /** @type {?} */ key in _this.settings) {
                if (_this.settings.hasOwnProperty(key)) {
                    settingsFinal[key] = confirmation.override[key] !== undefined ? confirmation.override[key] : _this.settings[key];
                }
            }
            var /** @type {?} */ injector = core.Injector.create([], _this.compViewContainerRef.parentInjector);
            var /** @type {?} */ factory = _this._resolver.resolveComponentFactory(ConfirmationComponent);
            var /** @type {?} */ component = factory.create(injector);
            component.instance.incomingData = __assign({}, settingsFinal, _this._buildItemTemplate('message', confirmation.message), _this._buildItemTemplate('title', confirmation.title), _this._buildItemTemplate('confirmText', confirmation.override.confirmText), _this._buildItemTemplate('declineText', confirmation.override.declineText), { resolve$: confirmation.resolve$ });
            _this._lastResolve = confirmation.resolve$.subscribe(function (res) { return _this._handleResolve(res); });
            _this.compViewContainerRef.insert(component.hostView);
            _this._current = component;
        });
    };
    /**
     * @return {?}
     */
    ConfirmationsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._listener) {
            this._listener.unsubscribe();
        }
    };
    /**
     * @param {?=} res
     * @return {?}
     */
    ConfirmationsComponent.prototype._handleResolve = /**
     * @param {?=} res
     * @return {?}
     */
    function (res) {
        this._current.destroy();
        this._lastResolve.unsubscribe();
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    ConfirmationsComponent.prototype._buildItemTemplate = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        if (!value) {
            return {};
        }
        if (value instanceof core.TemplateRef) {
            return _a = {}, _a[key] = value, _a[key + "IsTemplate"] = true, _a;
        }
        else {
            return _b = {}, _b[key] = this._domSanitize.bypassSecurityTrustHtml(value), _b;
        }
        var _a, _b;
    };
    ConfirmationsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'jaspero-confirmations',
                    entryComponents: [ConfirmationComponent],
                    template: "<div #comp></div>"
                },] },
    ];
    /** @nocollapse */
    ConfirmationsComponent.ctorParameters = function () { return [
        { type: ConfirmationService, },
        { type: core.ComponentFactoryResolver, },
        { type: platformBrowser.DomSanitizer, },
    ]; };
    ConfirmationsComponent.propDecorators = {
        "compViewContainerRef": [{ type: core.ViewChild, args: ['comp', { read: core.ViewContainerRef },] },],
        "defaultSettings": [{ type: core.Input },],
    };
    return ConfirmationsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var VariableContentComponent = /** @class */ (function () {
    function VariableContentComponent() {
        this.isTemplate = false;
    }
    VariableContentComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'jaspero-variable-content',
                    template: "<div *ngIf=\"isTemplate; else regular\"> <ng-container *ngTemplateOutlet=\"item\"></ng-container> </div> <ng-template #regular> <div [innerHTML]=\"item\"></div> </ng-template>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    VariableContentComponent.propDecorators = {
        "isTemplate": [{ type: core.Input },],
        "item": [{ type: core.Input },],
    };
    return VariableContentComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var JasperoConfirmationsModule = /** @class */ (function () {
    function JasperoConfirmationsModule() {
    }
    /**
     * @return {?}
     */
    JasperoConfirmationsModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: JasperoConfirmationsModule,
            providers: [ConfirmationService]
        };
    };
    JasperoConfirmationsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        ConfirmationsComponent,
                        ConfirmationComponent,
                        VariableContentComponent
                    ],
                    exports: [
                        ConfirmationsComponent
                    ]
                },] },
    ];
    return JasperoConfirmationsModule;
}());

exports.JasperoConfirmationsModule = JasperoConfirmationsModule;
exports.ConfirmationsComponent = ConfirmationsComponent;
exports.ConfirmationComponent = ConfirmationComponent;
exports.VariableContentComponent = VariableContentComponent;
exports.ConfirmationService = ConfirmationService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
